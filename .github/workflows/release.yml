name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  build-all:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: ExcelTableTools
            asset_name: ExcelTableTools-linux
          - os: windows-latest
            platform: windows
            artifact_name: ExcelTableTools.exe
            asset_name: ExcelTableTools-windows
          - os: macos-latest
            platform: macos
            artifact_name: ExcelTableTools
            asset_name: ExcelTableTools-macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    
    - name: Install Linux/Windows dependencies
      if: matrix.platform != 'macos'
      run: |
        pip install -r requirements.txt
    
    - name: Install macOS dependencies
      if: matrix.platform == 'macos'
      run: |
        pip install -r requirements-macos.txt
    
    - name: Build Linux
      if: matrix.platform == 'linux'
      run: |
        chmod +x GenerateExecutable/build_linux.sh
        ./GenerateExecutable/build_linux.sh
    
    - name: Build Windows
      if: matrix.platform == 'windows'
      shell: cmd
      run: |
        GenerateExecutable\build_windows.bat
    
    - name: Build macOS
      if: matrix.platform == 'macos'
      run: |
        chmod +x GenerateExecutable/build_macos.sh
        ./GenerateExecutable/build_macos.sh
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          GenerateExecutable/${{ matrix.platform }}/${{ matrix.artifact_name }}
          GenerateExecutable/${{ matrix.platform }}/${{ matrix.artifact_name }}.app/**
        if-no-files-found: error

  create-release:
    needs: build-all
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Debug artifact structure
      run: |
        echo "Artifact structure:"
        find artifacts -type f -ls
        echo ""
        echo "Directory contents:"
        ls -la artifacts/
        for dir in artifacts/*/; do
          echo "Contents of $dir:"
          ls -la "$dir"
        done
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy Linux binary if it exists
        if [ -f "artifacts/ExcelTableTools-linux/ExcelTableTools" ]; then
          cp "artifacts/ExcelTableTools-linux/ExcelTableTools" "release-assets/ExcelTableTools-linux"
          echo "Linux binary prepared"
        fi
        
        # Copy Windows binary if it exists
        if [ -f "artifacts/ExcelTableTools-windows/ExcelTableTools.exe" ]; then
          cp "artifacts/ExcelTableTools-windows/ExcelTableTools.exe" "release-assets/ExcelTableTools-windows.exe"
          echo "Windows binary prepared"
        fi
        
        # Handle macOS binary (standalone or app bundle)
        if [ -f "artifacts/ExcelTableTools-macos/ExcelTableTools" ]; then
          cp "artifacts/ExcelTableTools-macos/ExcelTableTools" "release-assets/ExcelTableTools-macos"
          echo "macOS standalone binary prepared"
        elif [ -d "artifacts/ExcelTableTools-macos/ExcelTableTools.app" ]; then
          cd artifacts/ExcelTableTools-macos
          zip -r ../../release-assets/ExcelTableTools-macos.zip ExcelTableTools.app
          cd ../..
          echo "macOS app bundle prepared"
        fi
        
        echo "Release assets prepared:"
        ls -la release-assets/
    
    - name: Create Release with GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release using GitHub CLI
        if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        echo "Creating release ${{ github.event.inputs.version }}..."
        gh release create "${{ github.event.inputs.version }}" \
          --title "Release ${{ github.event.inputs.version }}" \
          --notes "Release ${{ github.event.inputs.version }}" \
          $PRERELEASE_FLAG \
          release-assets/*
        
        echo "Release created successfully with all assets"